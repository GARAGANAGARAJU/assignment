 # 1) System Health Monitoring Script:

#!/bin/bash

CPU_THRESHOLD=80
MEMORY_THRESHOLD_MB=100
DISK_THRESHOLD_MB=100000 

LOG_FILE="system_health.log"

{
    
    
    # Get system metrics
    CPU_USAGE=$(top -b -n 1 | grep "%Cpu(s)" | awk '{print $2}' | cut -d. -f1)
    MEMORY_USAGE_MB=$(free -m | awk '/Mem/{print $3}')
    DISK_USAGE_MB=$(df -m / | awk 'NR==2{print $3}')

    # Check CPU usage
    if [ "$CPU_USAGE" -gt "$CPU_THRESHOLD" ]; then
        echo "High CPU usage detected: $CPU_USAGE%"
        echo "Script completed at: $(date)"
    fi

    # Check memory usage
    if [ "$MEMORY_USAGE_MB" -gt "$MEMORY_THRESHOLD_MB" ]; then
        echo "High memory usage detected: $MEMORY_USAGE_MB MB"
        echo "Script completed at: $(date)"
    fi

    # Check disk usage
    if [ "$DISK_USAGE_MB" -gt "$DISK_THRESHOLD_MB" ]; then
        echo "High disk usage detected: $DISK_USAGE_MB MB"
        echo "Script completed at: $(date)"
    fi

   
} >> "$LOG_FILE"


# 2) Automated Backup Solution:
 
#!/bin/bash

# Configuration
source_directory="/root/"
destination_server="ubuntu@18.218.95.149:/home/ubuntu/"
report_file="/home/ubuntu/report.log"

# Run rsync for backup
rsync -avz --delete -e "ssh -i /root/key.pem" "$source_directory" "$destination_server" > "$report_file" 2>&1
use crontab to automate this 
crontab -e 
and mention 0 2 * * * /path/to/backup_script.sh


# 3)  Log File Analyzer:

#!/bin/bash

log_file_path="/var/log/apache2/access.log"

if [ ! -f "$log_file_path" ]; then
    echo "Error: Log file not found!"
    exit 1
fi

total_requests=0
error_404_count=0
declare -A page_requests
declare -A ip_addresses

while IFS= read -r line; do
    status_code=$(echo "$line" | awk '{print $9}')
    requested_page=$(echo "$line" | awk '{print $7}')
    ip_address=$(echo "$line" | awk '{print $1}')

    ((total_requests++))

    if [ "$status_code" = "404" ]; then
        ((error_404_count++))
    fi

    ((page_requests["$requested_page"]++))
    ((ip_addresses["$ip_address"]++))

done < "$log_file_path"

echo "Total Requests: $total_requests"
echo "404 Errors: $error_404_count"

echo -e "\nMost Requested Pages:"
for page in "${!page_requests[@]}"; do
    count="${page_requests["$page"]}"
    echo "$page: $count requests"
done | sort -rnk3

echo -e "\nIP Addresses with Most Requests:"
for ip in "${!ip_addresses[@]}"; do
    count="${ip_addresses["$ip"]}"
    echo "$ip: $count requests"
done | sort -rnk3


# 4) Application Health Checker:

#!/bin/bash

check_application_health() {
    url=$1
    status_code=$(curl -s -o /dev/null -w "%{http_code}" $url)
    
    if [ $status_code -eq 200 ]; then
        echo "Application is UP and running!"
    else
        echo "Application is DOWN with HTTP status code: $status_code"
    fi
}

application_url="http://18.218.95.149:80"

while true; do
    result=$(check_application_health $application_url)
    echo "$(date) - $result"
    
    # Adjust the sleep interval as needed (in seconds)
    sleep 60
done
